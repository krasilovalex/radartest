import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, InputFile, BufferedInputFile, CallbackQuery
from config import BOT_TOKEN, CHANNEL_ID, HELP_CHAT_LINK 
from captcha import generate_captcha
from aiogram.client.default import DefaultBotProperties
from db import add_user, get_user, update_user
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import io
from datetime import datetime
from zoneinfo import ZoneInfo

CHID = CHANNEL_ID
###CHAT_LINK = LINKCHAT
tz = ZoneInfo("Asia/Kolkata")



# üèÖ –†–∞–Ω–≥–∏ (RU / EN / )
RANKS = [
    {"min_points": 0,   "ru": "üë∂ –ù–æ–≤–∏—á–æ–∫", "en": "üë∂ Beginner"},
    {"min_points": 100, "ru": "üïµÔ∏è –°–∫–∞—É—Ç",  "en": "üïµÔ∏è Scout"},
    {"min_points": 300, "ru": "üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—é—â–∏–π", "en": "üëÅÔ∏è Observer"},
    {"min_points": 500, "ru": "üßê –°–º–æ—Ç—Ä—è—â–∏–π", "en": "üßê Watcher"},
    {"min_points": 800, "ru": "ü¶Ö –ì–ª–∞–∑ –°–∏—Å—Ç–µ–º—ã", "en": "ü¶Ö Eye of the System"}
]

def get_rank(points: float) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–≥ (—Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —è–∑—ã–∫–∞–º–∏)
    """
    rank = RANKS[0]
    for r in RANKS:
        if points >= r['min_points']:
            rank = r
    return rank

def update_user_activity(user_id, added_points: float):
    user = get_user(user_id)
    new_points = user.get('points', 0) + added_points
    new_rank = get_rank(new_points)

    update_user(user_id, points=new_points, rank=new_rank)  # —Ç–µ–ø–µ—Ä—å rank ‚Äî —Å–ª–æ–≤–∞—Ä—å

    return new_rank, new_points


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()


captcha_codes = {}

langs = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English",
}

def main_menu(lang: str = "ru"):
    if lang == "ru":
        buttons = [
            ("üìç –ú–æ—Å—Ç/–ö—Ä—É–≥ - –ß–∏—Å—Ç–æ", "bridge_clear"),
            ("üöî –ú–æ—Å—Ç/–ö—Ä—É–≥ - –ö–æ–ø—ã", "bridge_cops"),
            ("üö® –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–ø–æ–≤", "report_cops"),
            ("‚úÖ –ö–æ–ø–æ–≤ –Ω–µ—Ç", "no_cops"),
            ("üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", HELP_CHAT_LINK)  # —Ä–µ–¥–∏—Ä–µ–∫—Ç
        ]
    elif lang == "en":
        buttons = [
            ("üìç Bridge/Circle - Clear", "bridge_clear"),
            ("üöî Bridge/Circle - Cops", "bridge_cops"),
            ("üö® Report Cops", "report_cops"),
            ("‚úÖ No Cops", "no_cops"),
            ("üÜò Need Help", HELP_CHAT_LINK)  # —Ä–µ–¥–∏—Ä–µ–∫—Ç
        ]
    else:
        buttons = [
            ("üìç Bridge/Circle - Clear", "bridge_clear"),
            ("üöî Bridge/Circle - Cops", "bridge_cops"),
            ("üö® Report Cops", "report_cops"),
            ("‚úÖ No Cops", "no_cops"),
            ("üÜò Need Help", HELP_CHAT_LINK)
        ]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=text,
                    url=callback if text.startswith("üÜò") else None,
                    callback_data=None if text.startswith("üÜò") else callback
                )
            ]
            for text, callback in buttons
        ]
    )
    return kb

@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    add_user(message.from_user.id)
    user = get_user(message.from_user.id)

    if user['lang'] is None or user['lang'] == "":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=langs["ru"], callback_data="lang_ru")],
                [InlineKeyboardButton(text=langs["en"], callback_data="lang_en")]
            ]
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose language", reply_markup=kb)
        return

    # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∏–¥—ë–º —Å—Ä–∞–∑—É –∫ –∫–∞–ø—á–µ
    if not user['verifed']:
        await start_captcha(message.from_user.id)
    else:
        await send_welcome(message, user)



@dp.callback_query(F.data.startswith("lang_"))
async def set_lang(callback: CallbackQuery):
    lang_code = callback.data.split("_")[1]
    update_user(callback.from_user.id, lang=lang_code)
    await callback.answer("‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω")
    await callback.message.delete()

    # –¢–µ–ø–µ—Ä—å –∫–∞–ø—á–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É
    await start_captcha(callback.from_user.id)









# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–ø—á–∏
# -----------------------------
# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–ø—á–∏
# -----------------------------
async def start_captcha(chat_id: int):
    user = get_user(chat_id)

    if user.get('verifed', False):
        await send_welcome(chat_id)
        return

    code, img = generate_captcha()
    captcha_codes[chat_id] = code

    buf = io.BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)

    lang = user.get('lang', 'en')
    text = {
        "ru": "üõ° –î–ª—è –≤—Ö–æ–¥–∞ —Ä–µ—à–∏ –∫–∞–ø—á—É. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
        "en": "üõ° Solve the captcha to enter. Enter the number from the image:"
    }.get(lang, "üõ° Solve the captcha to enter.")

    await bot.send_message(chat_id, text)
    await bot.send_photo(chat_id, BufferedInputFile(buf.read(), filename="captcha.png"))



# -----------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
# -----------------------------
@dp.message(F.text.regexp(r"^\d{4}$"))
async def check_captcha(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        await message.answer("‚ö† –û—à–∏–±–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if user.get('verifed', False):
        captcha_codes.pop(user_id, None)  # —É–¥–∞–ª—è–µ–º –∫–∞–ø—á—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return

    # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if user_id not in captcha_codes:
        await start_captcha(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if message.text == captcha_codes[user_id]:
        # –í–µ—Ä–Ω–æ
        update_user(user_id, verifed=True)
        captcha_codes.pop(user_id, None)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        user = get_user(user_id)
        await send_welcome(message, user)
    else:
        # –ù–µ–≤–µ—Ä–Ω–æ ‚Üí –Ω–æ–≤–∞—è –∫–∞–ø—á–∞
        code, img = generate_captcha()
        captcha_codes[user_id] = code

        buf = io.BytesIO()
        img.save(buf, format="PNG")
        buf.seek(0)

        lang = user.get('lang', 'en')
        text = {
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ù–æ–≤–∞—è –∫–∞–ø—á–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
            "en": "‚ùå Wrong! New captcha. Enter the number from the image:"
        }.get(lang, "‚ùå Wrong! New captcha. Enter the number from the image:")

        await message.answer(text)
        await message.answer_photo(photo=BufferedInputFile(buf.read(), filename="captcha.png"))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
from aiogram.types import FSInputFile

async def send_welcome(message: Message, user):
    lang = user['lang']

    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ FSInputFile
    photo = FSInputFile("welcome.jpg")

    if lang == "ru":
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CopRadar</b>!\n"
            "üó∫ –¢–≤–æ—è –∞–Ω–æ–Ω–∏–º–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "üìç –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª–∏—Ü–∏–∏\n"
            "üì∞ –ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –¥—Ä—É–≥–∏—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π\n"
            "üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\n\n"
            "–í—Å–µ –∞–Ω–æ–Ω–∏–º–Ω–æ üï∂Ô∏è.\n\n"
            "–ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å ‚Äî —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê –∏ –∑–≤–∞–Ω–∏–µ:\n"
            "üë∂ –ù–æ–≤–∏—á–æ–∫\nüïµÔ∏è –°–∫–∞—É—Ç\nüëÅÔ∏è –ù–∞–±–ª—é–¥–∞—é—â–∏–π\nüßê –°–º–æ—Ç—Ä—è—â–∏–π\nü¶Ö –ì–ª–∞–∑ –°–∏—Å—Ç–µ–º—ã"
        )
    elif lang == "en":
        welcome_text = (
            "üëã Welcome to <b>CopRadar</b>!\n"
            "üó∫ Your anonymous observation map.\n\n"
            "Here you can:\n"
            "üìç Instantly mark police posts\n"
            "üì∞ Get current info from other observers\n"
            "üÜò Request help from other participants\n\n"
            "All anonymous üï∂Ô∏è.\n\n"
            "The more you help ‚Äî the higher your rating ‚≠ê and rank:\n"
            "üë∂ Beginner\nüïµÔ∏è Scout\nüëÅÔ∏è Observer\nüßê Watcher\nü¶Ö Eye of the System"
        )

    await message.answer_photo(
        photo=photo,
        caption=welcome_text,
        reply_markup=main_menu(user['lang']),
        parse_mode="HTML"
    )


@dp.message(F.text.in_([langs["ru"], langs['en']]))
async def set_lang(message: Message):
    lang_code = [k for k, v in langs.items() if v == message.text][0]
    update_user(message.from_user.id, lang=lang_code)
    user = get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await message.answer(f"‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {message.text}", reply_markup=main_menu(user['lang']))





 
# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–∏—Å—Ç–æ"
clear_buttons = {
    "üìç –ú–æ—Å—Ç/–ö—Ä—É–≥ - –ß–∏—Å—Ç–æ": "ru",
    "üìç Bridge/Circle - Clear": "en",
}

clear_texts = {
    "ru": "–ö–æ–ø–æ–≤ –Ω–µ—Ç, –¥–æ—Ä–æ–≥–∞ —Å–≤–æ–±–æ–¥–Ω–∞ ‚úÖ",
    "en": "No cops, the road is clear ‚úÖ",
}

@dp.callback_query(F.data == "bridge_clear")
async def bridge_clear(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    lang_pressed = "ru" if user['lang'] == "ru" else "en"  # –≤—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥
    new_rank, new_points = update_user_activity(user_id, added_points=10)
    current_rank = f"{new_rank['ru']} / {new_rank['en']}  ({new_points:.0f} –æ—á–∫–æ–≤)"

    timestamp = datetime.now(tz).strftime("%H:%M:%S")
    lat, lon = 15.64090, 73.75887

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ –≤ –∫–∞–Ω–∞–ª
    await bot.send_location(chat_id=CHID, latitude=lat, longitude=lon)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    msg = (
        f"‚è± {timestamp}\n"
        f"<b>{current_rank}</b>\n"
        f"{clear_texts['ru']}\n"
        f"{clear_texts['en']}\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
    )
    await bot.send_message(chat_id=CHID, text=msg)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {clear_texts[lang_pressed]}\n"
        f"üéñ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:\n{current_rank}",
        parse_mode="HTML"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    user = get_user(user_id)
    new_rating = min(user['rating'] + 0.2, 5)
    update_user(user_id, rating=new_rating)

    await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ –∫–Ω–æ–ø–∫–µ




cops_buttons = {
    "üöî –ú–æ—Å—Ç/–ö—Ä—É–≥ - –ö–æ–ø—ã": "ru",
    "üöî Bridge/Circle - Cops": "en",
}

cops_texts = {
    "ru": "–ó–∞–º–µ—á–µ–Ω—ã –∫–æ–ø—ã üöî",
    "en": "Cops spotted üöî",
}


@dp.callback_query(F.data == "bridge_cops")
async def bridge_cops(callback : CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    lang_pressed = 'ru' if user['lang'] == 'ru' else 'en'

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–∞–Ω–≥ –∏ –æ—á–∫–∏
    new_rank, new_points = update_user_activity(user_id, added_points=10)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞–Ω–≥–∞
    current_rank = f"{new_rank['ru']} / {new_rank['en']} ({new_points:.0f} –æ—á–∫–æ–≤)"

    timestamp = datetime.now(tz).strftime("%H:%M:%S")
    lat, lon = 15.64090, 73.75887

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ –≤ –∫–∞–Ω–∞–ª
    await bot.send_location(chat_id=CHID, latitude=lat, longitude=lon)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Å —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–Ω–≥–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    channel_msg = (
        f"‚è± {timestamp}\n"
        f"<b>{current_rank}</b>\n"
        f"{cops_texts['ru']}\n"
        f"{cops_texts['en']}\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
    )
    await bot.send_message(chat_id=CHID, text=channel_msg, parse_mode="HTML")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –∏ —Ä–∞–Ω–≥
    await callback.message.answer(
        f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {cops_texts[lang_pressed]}\n"
        f"üéñ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:\n{current_rank}",
        parse_mode="HTML"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    user = get_user(user_id)
    new_rating = min(user['rating'] + 0.2, 5)
    update_user(user_id, rating=new_rating)


 # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–ø–æ–≤"
report_buttons = {
    "üö® –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–ø–æ–≤": "ru",
    "üö® Report Cops": "en",
}

report_texts = {
    "ru": "–ó–∞–º–µ—á–µ–Ω—ã –∫–æ–ø—ã üöî",
    "en": "Cops reported üöî",
}

class ReportCops(StatesGroup):
    waiting_for_location = State()


@dp.callback_query(F.data == "report_cops")
async def report_cops_request(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = get_user(user_id     )
    lang_pressed = 'ru' if user['lang'] == 'ru' else 'en'
    await state.set_state(ReportCops.waiting_for_location)  # –∂–¥–µ–º –≥–µ–æ
    await state.update_data(lang_pressed=lang_pressed)  # —Å–æ—Ö—Ä–∞–Ω–∏–º —è–∑—ã–∫

    if lang_pressed == "ru":
        await callback.message.answer("üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ-–º–µ—Ç–∫—É –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–æ–ø—ã. \n–ß—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ-–º–µ—Ç–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' ")
    elif lang_pressed == "en":
        await callback.message.answer("üìçüìç Send the location of where the cops are.\nTo send a location, tap the paperclip in the lower-left corner and select 'Location'.")

    await callback.answer()

@dp.message(ReportCops.waiting_for_location, F.location)
async def report_cops_location(message: Message, state : FSMContext):
    data = await state.get_data()
    lang_pressed = data['lang_pressed']
    user_id = message.from_user.id

    new_rank, new_points = update_user_activity(user_id, added_points=10)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞–Ω–≥–∞
    current_rank = f"{new_rank['ru']} / {new_rank['en']} ({new_points:.0f} –æ—á–∫–æ–≤)"

    user = get_user(message.from_user.id)
    lat, lon = message.location.latitude, message.location.longitude
    timestamp = datetime.now(tz).strftime("%H:%M:%S")


    await bot.send_location(chat_id=CHID, latitude=lat, longitude=lon)
    msg = (
        f"‚è± {timestamp}\n"
        f"<b>{current_rank}</b>\n"
        f"{report_texts['ru']}\n"
        f"{report_texts['en']}\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
    )
    await bot.send_message(chat_id=CHID, text=msg)

    await message.answer(
        f"‚úÖ {report_texts[lang_pressed]} ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
        f"üéñ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:\n{current_rank}",
        parse_mode="HTML"
    )

    user = get_user(user_id)
    new_rating = min(user['rating'] + 0.2, 5)
    update_user(user_id, rating=new_rating)

    await state.clear()


nocops_buttons = {
    "‚úÖ –ö–æ–ø–æ–≤ –Ω–µ—Ç": "ru",
    "‚úÖ No Cops": "en",
}

nocops_texts = {
    "ru": "–ö–æ–ø–æ–≤ –Ω–µ—Ç, –¥–æ—Ä–æ–≥–∞ —Å–≤–æ–±–æ–¥–Ω–∞ ‚úÖ",
    "en": "No cops, the road is clear ‚úÖ",
}


# FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ
class NoCops(StatesGroup):
    waiting_for_location = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == 'no_cops')
async def nocops_request(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = get_user(user_id)
    lang_pressed = 'ru' if user['lang'] == 'ru' else 'en'
    await state.set_state(NoCops.waiting_for_location)   # –∂–¥–µ–º –≥–µ–æ
    await state.update_data(lang_pressed=lang_pressed)   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫

    prompts = {
        "ru": "üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ-–º–µ—Ç–∫—É –º–µ—Å—Ç–∞, –≥–¥–µ –∫–æ–ø–æ–≤ –ù–ï–¢. \n–ß—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ-–º–µ—Ç–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'",
        "en": "üìç Send the location where there are NO cops.\nTo send a location, tap the paperclip in the lower-left corner and select 'Location'.",
    }
    await callback.message.answer(prompts[lang_pressed])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ-–º–µ—Ç–∫–∏
@dp.message(NoCops.waiting_for_location, F.location)
async def nocops_location(message: Message, state: FSMContext):
    data = await state.get_data()
    lang_pressed = data["lang_pressed"]
    user_id = message.from_user.id

    user = get_user(message.from_user.id)
    lat, lon = message.location.latitude, message.location.longitude
    timestamp = datetime.now(tz).strftime("%H:%M:%S")

    new_rank, new_points = update_user_activity(user_id, added_points=10)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞–Ω–≥–∞
    current_rank = f"{new_rank['ru']} / {new_rank['en']} ({new_points:.0f} –æ—á–∫–æ–≤)"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ –≤ –∫–∞–Ω–∞–ª
    await bot.send_location(chat_id=CHID, latitude=lat, longitude=lon)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –Ω–∞ 3 —è–∑—ã–∫–∞—Ö
    msg = (
        f"‚è± {timestamp}\n"
        f"<b>{current_rank}</b>\n"
        f"{nocops_texts['ru']}\n"
        f"{nocops_texts['en']}\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
    )
    await bot.send_message(chat_id=CHID, text=msg)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
    await message.answer(
        f"‚úÖ {nocops_texts[lang_pressed]} ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
        f"üéñ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:\n{current_rank}",
        parse_mode="HTML"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    user = get_user(user_id)
    new_rating = min(user['rating'] + 0.2, 5)
    update_user(user_id, rating=new_rating)

    await state.clear()


help_buttons = {
    "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å": "ru",
    "üÜò Need Help": "en",
}

help_texts = {
    "ru": "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∑–∞—Ö–æ–¥–∏ –≤ —á–∞—Ç:",
    "en": "If you need help ‚Äî join the chat:",
}

CHAT_ID = "none"


@dp.callback_query(F.data == 'need_help')
async def need_help(callback : CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    lang_pressed = 'ru' if user['lang'] == 'ru' else 'en'

    try:
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É (1 –¥–µ–Ω—å)
        invite = await bot.create_chat_invite_link(
            chat_id=CHAT_ID,
            expire_date=int(datetime.now().timestamp()) + 86400,
            name=f"invite_for_{callback.from_user.id}"
        )

        await callback.message.answer(
            f"{help_texts[lang_pressed]}\nüëâ {invite.invite_link}"
        )

    except Exception as e:
        # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
        await callback.message.answer(
            f"{help_texts[lang_pressed]}\n‚ö†Ô∏è –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
        )
        print(f"Error creating invite link: {e}")



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
